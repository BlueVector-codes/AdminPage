{"version":3,"sources":["components/AdminPage.js","components/LoginForm.js","components/RegisterForm.js","App.js","serviceWorker.js","index.js"],"names":["AdminPage","React","Component","state","username","password","priv","users","checkUser","permission","axios","get","then","res","data","length","addUser","console","error","catch","err","post","setState","fetchUsers","handleSubmit","e","preventDefault","handleDelete","i","p","delete","handleChange","name","target","id","value","confirmUser","put","this","className","onSubmit","type","placeholder","onChange","map","user","key","_id","confirm","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36047e9d.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class AdminPage extends React.Component{\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        priv: \"\",\r\n        users: []\r\n    }\r\n\r\n    checkUser = (username, password, permission) => {\r\n        axios.get(`/api/users/${username}`)\r\n            .then(res => {\r\n                if(res.data.length === 0){\r\n                    this.addUser(username, password, permission);\r\n                }\r\n                else{\r\n                    console.error(\"this user already exists\");\r\n                }\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    addUser = (username, password, permission) => {\r\n            axios.post('/api/users', {username, password, permission})\r\n                .catch(err => console.error(err));\r\n            this.setState({\r\n                username: \"\",\r\n                password: \"\",\r\n                priv: \"\"\r\n            })\r\n    }\r\n\r\n    fetchUsers = () => {\r\n        axios.get('/api/users')\r\n            .then(res => {\r\n                this.setState({\r\n                    users: res.data\r\n                })\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const {username,password, priv} = this.state;\r\n        if(username !== \"\" && password !== \"\")\r\n            this.checkUser(username, password, priv);\r\n        else{\r\n            console.error(\"please type in info\")\r\n        }\r\n    }  \r\n\r\n    handleDelete = (i, p) => {\r\n        if(p !== \"x\")\r\n            axios.delete(`/api/users/${i}`)\r\n                .catch(err => console.error(err));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const name = e.target.id;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    confirmUser = (id) => {\r\n        axios.put(`/api/getUsers/${id}`)\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    render(){\r\n        this.fetchUsers();\r\n        return(\r\n            <div className=\"adminPage\">\r\n                <h1>Admin Page</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username...\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.username}\r\n                        id=\"username\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Password...\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.password}\r\n                        id=\"password\"\r\n                    />\r\n                    <select \r\n                        onChange={this.handleChange}\r\n                        value={this.state.priv}\r\n                        id=\"priv\"\r\n                    >\r\n                        <option value=\"u\">User</option>\r\n                        <option value=\"a\">Admin</option>\r\n                        <option value=\"x\">ROOT</option>\r\n                    </select>\r\n                    <button>Add user</button>\r\n                </form>\r\n                <div className=\"users\">\r\n                    {\r\n                        this.state.users && this.state.users.map((user) => (\r\n                            <div className=\"user\" key={user._id}>\r\n                                <p>Username: {user.username}</p>\r\n                                <p>Password: {user.password}</p>\r\n                                <p>Confirmed: {user.confirm ? <button disabled>Yes</button> : <button onClick={() => this.confirmUser(user._id)}>No</button>}</p>\r\n                                <p>Permission: {user.permission === \"x\" ? \"ROOT\" : \r\n                                    user.permission === \"a\" ? \"Admin\" : \"User\"\r\n                                }</p>\r\n                                {user.permission !== \"x\" ? <button onClick={() => this.handleDelete(user._id, user.permission)}>X</button> : <button disabled>X</button>}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class LoginForm extends React.Component{\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        priv: \"\"\r\n    }\r\n\r\n    setPermission = (p) => {\r\n        if(p === \"x\") this.setState({priv: \"ROOT\"})\r\n        else if(p === \"a\") this.setState({priv: \"Admin\"})\r\n        else if(p === \"u\")this.setState({priv: \"User\"})\r\n        else this.setState({priv: \"Anonymous\"})\r\n    }\r\n\r\n    checkUser = (ur, ps) => {\r\n        axios.get('/api/users/' + ur + \"&\" + ps)\r\n            .then(res => {\r\n                if(res.data.length === 1){\r\n                    console.log(res.data[0])\r\n                    const { permission, confirm } = res.data[0];\r\n                    if(confirm) this.setPermission(permission);\r\n                    else console.error(\"this user has not been confirmed yet\")\r\n                }\r\n                else console.error(\"no such user found\");\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        const { username, password } = this.state;\r\n        e.preventDefault();\r\n        if(username !== \"\" && password !== \"\"){\r\n            this.checkUser(username, password);\r\n            this.setState({\r\n                username: \"\",\r\n                password: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const name = e.target.id;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"loginForm\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Your username...\"\r\n                        required\r\n                    />\r\n                    <input \r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Your password...\"\r\n                        required\r\n                    />\r\n                    <button>Log in</button>\r\n                </form>\r\n                <p>{ this.state.priv !== \"\" ? this.state.priv : \"Not logged in\"}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class RegisterForm extends React.Component{\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        repassword: \"\"\r\n    }\r\n    \r\n    fetchUsers = () => {\r\n\r\n    }\r\n\r\n    addUser = (us, ps) => {\r\n        axios.post('/api/users', {data: {username: us, password: ps}})\r\n            .then(res => console.log(res))\r\n            .catch(err => console.error(err));\r\n    }\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, password, repassword } = this.state;\r\n        if((username !== \"\" && password !== \"\" & repassword !== \"\") && (password === repassword)){\r\n            this.setState({\r\n                username: \"\",\r\n                password: \"\",\r\n                repassword: \"\"\r\n            })\r\n            console.log(this.state);\r\n            this.addUser(username, password)\r\n        }\r\n        else if(password !== repassword){\r\n            console.error(\"passwords are not the same\")\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const name = e.target.id;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"registerForm\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Type in username...\"\r\n                        required\r\n                    />\r\n                    <input \r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Type in password...\"\r\n                        required\r\n                    />\r\n                    <input \r\n                        type=\"password\"\r\n                        id=\"repassword\"\r\n                        value={this.state.repassword}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Type in password again...\"\r\n                        required\r\n                    />\r\n                    <button>Register</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport LoginForm from './components/LoginForm';\nimport RegisterForm from './components/RegisterForm';\nimport AdminPage from './components/AdminPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AdminPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}